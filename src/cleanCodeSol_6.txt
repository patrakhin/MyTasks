6.1
//Чубакка и гравитационные колодцы
public class TransformTransform {  // трансформация трансформации

    public static boolean seekTrueKey(int [] inputArray, int sizeInputArray) { //поиск истинного  ключа
        LinkedList <Integer> storageMaxValue = new LinkedList<>(); // хранилище максимального значения
        int maxValueKey; //максимальное значение ключа
        int sumMaxValuesKeys = 0; // сумма максимальных значений ключей
        // some code…
        return sumMaxValuesKeys % 2 == 0;
    }
}
//Шерлок Холмс и механическая шкатулка
public class ValidPasswordsCheck {
    public static boolean ValidStringCheck (String inputStringForCheck) {
        char[] restructStringCheck = inputStringForCheck.toCharArray();
        int[] resultDecodingChars = new int[inputStringForCheck.length()];
        HashMap<Integer, Integer> uniquesValuesCheck = new HashMap<>();
        //decoding
        for (int i = 0; i < restructStringCheck.length; i++) {
            resultDecodingChars[i] = (restructStringCheck[i]);
        }
        // search uniquesValuesCheck
        for (int i = 0; i < resultDecodingChars.length; i++) {
            if (uniquesValuesCheck.containsKey(resultDecodingChars[i])) {
                continue;
            }
            for (int j = i; j < resultDecodingChars.length; j++) {
                if ( resultDecodingChars[j] == resultDecodingChars [i] && !uniquesValuesCheck.containsKey(resultDecodingChars[j])) {
                    uniquesValuesCheck.put(resultDecodingChars[i], 0);
                }
                if ( resultDecodingChars[j] == resultDecodingChars [i] && uniquesValuesCheck.containsKey(resultDecodingChars[j])) {
                    uniquesValuesCheck.put(resultDecodingChars[i], uniquesValuesCheck.get(resultDecodingChars[i]) + 1);
                }
            }
        }
        //get all copyUniquesValues to list
        ArrayList<Integer> copyUniquesValues = new ArrayList<>(uniquesValuesCheck.values());
        int [] descendingOrderUniq = new int[copyUniquesValues.size()];
        for (int i = 0; i < descendingOrderUniq.length; i++) {
            descendingOrderUniq [i] = copyUniquesValues.get(i);
        }
        //sort decline
        for (int i = 0; i < descendingOrderUniq.length; i++) {
            for (int j = 0; j < descendingOrderUniq.length; j++) {
                if (descendingOrderUniq[i] >= descendingOrderUniq[j]) {
                    int x = descendingOrderUniq[i];
                    descendingOrderUniq[i] = descendingOrderUniq[j];
                    descendingOrderUniq[j] = x;
                }
            }
        }
        // search valid

        //if all equals
        if (descendingOrderUniq [0] == descendingOrderUniq[descendingOrderUniq.length - 1]) {
            return true;
        }
        //if are equal to all but the latter and latter - 1 = 0
        if ((descendingOrderUniq [0] == descendingOrderUniq[descendingOrderUniq.length - 2]) && (((descendingOrderUniq[descendingOrderUniq.length - 1]) - 1) == 0)) {
            return true;
        }
        //if are equal to all but the first
        return (descendingOrderUniq[descendingOrderUniq.length - 1] == descendingOrderUniq[1]) && ((descendingOrderUniq[0] - 1) == descendingOrderUniq[descendingOrderUniq.length - 1]);
    }
}
6.2
// Автоматизация отчетности о продажах
    public static String [] ShopOLAP(int N, String [] items) {
        HashMap<String, Integer> mapItems = new HashMap<>(); //использовал ИТ термин
        HashMap <Integer, String> mapIndex = new HashMap<>(); //for double sel of item - //использовал ИТ термин
        boolean breakEr = false;
        String key = ""; //id-Items // можно было бы так idItemsKey
        String value = ""; //id-Sel //  можно было бы так idSelItemsKey

6.3
// Функция - сложение переменных. Имена выбирал из пространства - сложение. Соответственно, может быть: сумма, первое слагаемое, второе слагаемое и т.д.
public static int additionVariable(int firstItem, int  secondItem) { // сложение переменных
    return firstItem + secondItem; // первое слагаемое второе слагаемое
}
// Клас и метод (Безумный Макс)
public class ImpulseStart {
    public static int [] sortForEngineStart(int sizeRandomArray, int [] RandomArray) {
        //упорядочиваем массив по возрастанию
        int bufferExchange;
        for (int j = 0; j < sizeRandomArray; j ++) {
            int minValue = j;
            for (int i  = j + 1; i < sizeRandomArray; i ++) {
                if (RandomArray[minValue] > RandomArray[i]) {
                    minValue = i;
                }
            }
            bufferExchange = RandomArray [j];
            RandomArray [j] = RandomArray [minValue];
            RandomArray [minValue] = bufferExchange;
        }
        //ищем середину массива
        int middleOfTheArray = (RandomArray.length - 1) / 2;
        // упорядочиваем массив по убыванию с середины
        int bufferForSortValue;
        for (int j = middleOfTheArray; j < sizeRandomArray; j ++) {
            int maxValue = j;
            for (int i  = j + 1; i < sizeRandomArray; i ++) {
                if (RandomArray[maxValue] < RandomArray[i]) {
                    maxValue = i;
                }
            }
            bufferForSortValue = RandomArray [j];
            RandomArray [j] = RandomArray [maxValue];
            RandomArray [maxValue] = bufferForSortValue;
        }

        for (int i = 0; i < sizeRandomArray; i++){
            System.out.println(RandomArray[i]);
        }
        return RandomArray;
    }
    public static void main(String[] args) {
        int N = 13;
        int [] Tele = new int [] {1, 3, 5, 6, 2, 4, 7, 8, 9, 11, 10, 13, 12};
        sortForEngineStart(N,Tele);
    }
}

6.4
        //Белые ходоки
        int walkersBeforePeasant -       enemyBeforePeasant
        int walkersLikeBetweenPeasant -  enemyTroopsIsSmall
        int walkersBeenBetweenPeasant -  enemyWasAmongPeasant
        int walkersBetweenPeasant -      enemyAmongPeasant

        //Гарри Потер идет в первый класс
        indexStartInSortArray - startingPoint

