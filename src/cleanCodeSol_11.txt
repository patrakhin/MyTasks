3.1.
3.1.1.
public class Supplier {
    public static void main(String[] args) {
        WheelPlant wheelPlantDiesel = new PlantDieselWheel();
        WheelSets wheelSetsDiesel = wheelPlantDiesel.fromRepairPlant();
        wheelSetsDiesel.repairWheelSets();
        WheelPlant wheelPlantElectric = new PlantElectricWheel();
        WheelSets wheelSetsElectric = wheelPlantElectric.fromRepairPlant();
        wheelSetsElectric.repairWheelSets();
    }
}

interface WheelSets {
    void repairWheelSets();
}


class DieselWheelSets implements WheelSets {

    @Override
    public void repairWheelSets() {
        out.println("Repair diesel loco wheel sets");
    }
}

class ElectricWheelSets implements WheelSets {
    @Override
    public void repairWheelSets() {
        out.println("Repair electric loco wheel sets");
    }
}

interface WheelPlant {
    WheelSets fromRepairPlant();
}

class PlantDieselWheel implements WheelPlant {
    @Override
    public WheelSets fromRepairPlant() {
        return new DieselWheelSets();
    }
}

class PlantElectricWheel implements WheelPlant {
    @Override
    public WheelSets fromRepairPlant() {
        return new ElectricWheelSets();
    }
}

3.1.2.
public class PlaceOnMap {

    public static void main(String[] args) {
        NewPlaceOnMap newPlaceOnMap = NewPlaceOnMap.usingMapAndDevice("MyMap","CoolDevice");
        newPlaceOnMap.markingPoint();
    }
}

class NewPlaceOnMap {
    private static final Logger log = Logger.getLogger(NewPlaceOnMap.class);
    String map;
    String device;
    private NewPlaceOnMap(String map, String device) {
        this.map = map;
        this.device = device;
    }
    public static NewPlaceOnMap usingMapAndDevice(String map, String device) {
        return new NewPlaceOnMap(map, device);
    }
    void markingPoint() {
        log.debug("I marked a point on the " + map + " with this " + device);
    }
}

3.1.3.
public class Heroes {
    private static final Logger log = Logger.getLogger(Heroes.class);
    public static final int TYPE_HUMAN = 1;
    public static final int TYPE_ELF = 2;
    public static final int TYPE_DWARF = 3;
    protected int type;
    private Heroes(int type) {
        this.type = type;
    }

    public static Heroes typeHuman() {
        return new Heroes(TYPE_HUMAN );
    }
    public static Heroes typeElf() {
        return new Heroes(TYPE_ELF);
    }
    public static Heroes typeDwarf() {
        return new Heroes(TYPE_DWARF);
    }

    void sayHello() {
        log.debug("Welcome, my Lord, I'm " + getTypeHero(type));
    }
    private String getTypeHero(int type) {
        if (type == 1) {
            return "Human!";
        } else if (type == 2) {
            return "Elf!";
        }
        return "Dwarf!";
    }

}

class Create {
    public static void main(String[] args) {
        Heroes myHuman = Heroes.typeHuman();
        myHuman.sayHello();
        Heroes myElf = Heroes.typeElf();
        myElf.sayHello();
        Heroes myDwarf = Heroes.typeDwarf();
        myDwarf.sayHello();
    }
}

3.2.
//К сожалению я не использовал интерфейсы или абстрактные классы ранее.
//Но, в моем примере "Heroes" (исходя из постоянно читаемого Шилдта) - метод "Приветствие" можно вынести в интерфейс,
//и если добавятся еще какие либо методы в классе, их можно объявить в интерфейсе как "default", это не приведет к переписыванию кода в классе,
//но добавит новые возможности.